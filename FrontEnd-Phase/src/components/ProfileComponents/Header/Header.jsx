import React, { useEffect, useRef, useState, useContext } from "react";
import Select from "react-select";
import makeAnimated from "react-select/animated";
//Import Images
import defaultImage from "../../../images/profile/defaultImage.png";

import { NavLink, useNavigate } from "react-router-dom";

//Mui Components
import PropTypes from "prop-types";
import AppBar from "@mui/material/AppBar";
import Toolbar from "@mui/material/Toolbar";
import useScrollTrigger from "@mui/material/useScrollTrigger";
import Box from "@mui/material/Box";
import Grid from "@mui/material/Grid";
import Slide from "@mui/material/Slide";
import Menu from "@mui/material/Menu";
import MenuItem from "@mui/material/MenuItem";
import Drawer from "@mui/material/Drawer";
import List from "@mui/material/List";
import Divider from "@mui/material/Divider";
import ListItem from "@mui/material/ListItem";
import InputAdornment from "@mui/material/InputAdornment";
import TextField from "@mui/material/TextField";
import Accordion from "@mui/material/Accordion";
import AccordionSummary from "@mui/material/AccordionSummary";
import AccordionDetails from "@mui/material/AccordionDetails";
import Avatar from "@mui/material/Avatar";
import { Button, Typography } from "@mui/material";
import Skeleton from "@mui/material/Skeleton";

import { styled } from "@mui/material/styles";
//Style
import "./HeaderStyle.css";
import { IP } from "../../../App";

import { NavbarIcon } from "../Navbar/RightNavbar";
import { NavItems } from "../Navbar/RightNavbar";
import { Search_Card } from "../../hot_auctions_card/auctions_card";
import {
  errorMessage,
  successMessage,
  defaultMessage,
  warningMessage,
} from "../../Toast/ToastCustom";
//Images
import bidWinLogo from "../../../images/Header/logoBg.png";
import axios from "axios";
import AuthContext from "../../../AuthService";
import { LinearColor } from "../HistoryBuyComp/HistoryBuyComponent";
const animatedComponents = makeAnimated();

function HideOnScroll(props) {
  const { children, window } = props;
  // Note that you normally won't need to set the window ref as useScrollTrigger
  // will default to window.
  // This is only being set here because the demo is in an iframe.
  const trigger = useScrollTrigger({
    target: window ? window() : undefined,
  });

  return (
    <Slide appear={false} direction="down" in={!trigger}>
      {children}
    </Slide>
  );
}

HideOnScroll.propTypes = {
  children: PropTypes.element.isRequired,
  /**
   * Injected by the documentation to work in an iframe.
   * You won't need it on your project.
   */
  window: PropTypes.func,
};

export default function Header(props) {
  const [userInfo, setUserinfo] = useState(undefined);
  let { user, logout, authTokens } = useContext(AuthContext);

  const fetchPersonalInfo = async () => {
    const accessToken = authTokens.access;
    const headers = {
      Authorization: `Bearer ${accessToken}`,
      "Content-Type": "application/json",
    };
    try {
      const response = await axios.get(`${IP}/user/log_info/`, {
        headers,
      });
      if (response.status === 200) {
        setUserinfo(response.data);
      }
    } catch (error) {
      errorMessage("خطا در اتصال به شبکه");
    }
  };
  //To Set user Information
  useEffect(() => {
    fetchPersonalInfo();
  }, []);

  //Propper On Profile Funnctions//////////////////
  const [openPopperProfile, setOpenPopperProfile] = React.useState(null);
  const openProfile = Boolean(openPopperProfile);
  const handleClickOnProfile = (event) => {
    setOpenPopperProfile(event.currentTarget);
  };
  const handleClosePopperProfile = () => {
    setOpenPopperProfile(null);
  };

  const [anchorEl, setAnchorEl] = React.useState(null);
  const open = Boolean(anchorEl);
  const handleClick = (event) => {
    setAnchorEl(event.currentTarget);
  };
  const handleClose = () => {
    setAnchorEl(null);
  };
  //End Of Propper On Shop Funnctions///////////
  //Drawer Funnctions///////////////////////////
  const [openDrawer, setOpenDrawer] = React.useState(false);
  const toggleDrawer = (newOpen) => () => {
    setOpenDrawer(newOpen);
  };

  //Handle Click Function
  const navigate = useNavigate();
  const handleClickGoSignUp = () => {
    navigate("/signup");
  };
  //End Of Handle Click Function

  //Search Bar Functions////////////////////////
  const [searchContent, setSearchContent] = useState("");
  const [isFocused, setIsFocused] = useState(false);
  const [searchData, setSearchData] = useState(null);
  const [noItems, setNoItems] = useState(false);
  const containerRef = useRef();

  const handleClickOutside = (event) => {
    if (containerRef.current && !containerRef.current.contains(event.target)) {
      setIsFocused(false);
    }
  };

  useEffect(() => {
    if (searchContent) {
      const fetchData = async () => {
        try {
          const response = await axios.get(
            `http://127.0.0.1:8000/item/search/?name=${encodeURIComponent(
              searchContent
            )}`
          );
          setSearchData(response.data);
          setNoItems(false);
        } catch (error) {
          console.error(
            "Error while reading search cards",
            error.response ? error.response.data : error.message
          );
          setNoItems(true);
        }
      };
      fetchData();
    }
    document.addEventListener("mousedown", handleClickOutside);
    return () => {
      document.removeEventListener("mousedown", handleClickOutside);
    };
  }, [searchContent]);

  let searchCards = null;
  if (searchData) {
    if (searchData !== "Items does not found") {
      searchCards = searchData.map((search) => {
        return (
          <Search_Card
            id={search.id}
            image={search.images[0]}
            title={search.title}
            lastBid={search.price}
            description={search.description}
            end_time={search.release_date}
          />
        );
      });
    }
  }

  const handleChangeSetSearchContent = (event) => {
    const input = event.target.value;
    setSearchContent(input);
  };
  const handleClickOnSearchButton = () => {
    console.log(searchContent);
    console.log("click on search button");
  };

  const handleFocus = () => {
    setIsFocused(true);
  };

  const SearchBox = styled(Box)(({ theme }) => ({
    position: "absolute",
    height: "300px",
    backgroundColor: "white",
    zIndex: 1,
    borderRadius: "0 0 10px 10px",
    boxShadow: "0 0 5px rgba(0, 0, 0, 0.2)",
    overflowY: "scroll",
    [theme.breakpoints.up("xs")]: {
      width: "154%",
      left: "50%",
      transform: "translateX(-33%)",
    },
    [theme.breakpoints.up("sm")]: {
      width: "139%",
      left: "50%",
      transform: "translateX(-35%)",
    },
    [theme.breakpoints.up("md")]: {
      width: "300%",
      left: "50%",
      transform: "translateX(-62%)",
    },
  }));

  //End Of Search Bar Functions/////////////////
  function handleClickOnHeaderItemSX(tabNumber) {
    props.setTab(tabNumber);
    setOpenDrawer(false);
  }
  function handleClickOnHeaderItem(tabNumber) {
    props.setTab(tabNumber);
    handleClosePopperProfile();
  }
  const handleLogOut = () => {
    logout();
  };
  const DrawerList = (
    <Box sx={{ width: 250 }} role="presentation">
      <Grid
        item
        sx={{
          display: "flex",
          justifyContent: "space-between",
          alignItems: "center",
          width: "100%",
          padding: "23px 10px",
        }}
      >
        <Grid item className="header-top-logo">
          <NavLink to="/" rel="noopener noreferrer">
            <svg
              width="178"
              height="45"
              viewBox="0 0 178 45"
              fill="none"
              xmlns="http://www.w3.org/2000/svg"
            >
              <path
                d="M17.5886 42.8515C17.5886 43.5215 17.4583 43.8565 17.1977 43.8565C16.9371 43.8565 16.6952 43.6332 16.4718 43.1865C16.2857 42.7398 16.1554 42.3117 16.081 41.9023C16.0438 41.4928 16.0251 41.1578 16.0251 40.8972C15.1318 40.4877 14.1825 39.948 13.1775 39.2779C12.1724 38.6079 11.6699 37.9751 11.6699 37.3795C11.6699 37.1561 11.7629 37.0445 11.9491 37.0445C12.0607 37.0445 12.3958 37.2306 12.9541 37.6028C13.5125 37.9378 14.1081 38.3287 14.7409 38.7754C15.4109 39.1849 15.839 39.4268 16.0251 39.5013C16.0251 35.4066 17.1605 29.9346 19.4312 23.0853C21.7391 16.236 24.1215 10.2987 26.5783 5.27335C22.0741 4.19384 18.24 3.65408 15.0759 3.65408C13.5125 3.65408 12.0235 3.80298 10.609 4.10078C9.19445 4.36135 7.83576 4.80804 6.5329 5.44086C5.23004 6.03645 4.18776 6.94845 3.40604 8.17686C2.62433 9.40527 2.23347 10.857 2.23347 12.5321C2.23347 16.329 4.03886 19.9026 7.64963 23.2528C7.79853 22.5083 7.98465 22.136 8.208 22.136C8.46857 22.136 8.78498 22.5455 9.15723 23.3645C9.5667 24.1462 9.77143 24.6859 9.77143 24.9837C9.77143 25.4676 9.43641 25.7096 8.76637 25.7096C7.38906 25.7096 5.99314 24.9279 4.57861 23.3645C3.20131 21.7638 2.10318 19.977 1.28425 18.0041C0.502531 16.0312 0.111673 14.3561 0.111673 12.9788C0.111673 10.9315 0.558367 9.18192 1.45176 7.73017C2.38237 6.24119 3.62939 5.12445 5.19282 4.37996C6.75625 3.63547 8.37551 3.09572 10.0506 2.7607C11.7257 2.42568 13.5125 2.25817 15.4109 2.25817C18.8356 2.25817 22.8 2.74208 27.3042 3.70992C27.8253 2.48151 28.3837 1.60674 28.9793 1.08559C29.0165 1.08559 29.0537 1.08559 29.0909 1.08559C29.2398 1.08559 29.4074 1.06698 29.5935 1.02976C29.7796 0.992533 29.9843 0.955308 30.2077 0.918082C30.431 0.843634 30.6171 0.80641 30.766 0.80641C31.8083 0.80641 32.3295 1.02976 32.3295 1.47645C32.3295 1.51368 32.3109 1.5509 32.2736 1.58812C32.2736 1.62535 32.2736 1.66257 32.2736 1.6998C31.8642 2.25817 31.3244 3.17017 30.6544 4.4358C32.0317 4.80804 33.4276 5.27335 34.8421 5.83171C36.2567 6.35286 37.7643 7.04151 39.3649 7.89768C40.9656 8.75384 42.2498 9.79612 43.2176 11.0245C44.2227 12.2529 44.7252 13.5744 44.7252 14.9889C44.7252 16.2918 44.2971 17.5016 43.441 18.6183C42.622 19.6978 41.5053 20.6285 40.0908 21.4102C38.7135 22.1547 37.4106 22.7689 36.1822 23.2528C34.991 23.7367 33.744 24.1462 32.4411 24.4812C33.7812 24.5556 35.233 24.7604 36.7964 25.0954C38.3598 25.4304 39.9791 25.9143 41.6542 26.5471C43.3293 27.18 44.7066 28.0734 45.7861 29.2273C46.9029 30.3813 47.4612 31.6841 47.4612 33.1359C47.4612 34.5504 46.8098 35.9463 45.5069 37.3236C41.7473 41.2694 36.4056 43.2423 29.4818 43.2423C24.9032 43.2423 20.9202 42.6281 17.5327 41.3997C17.5327 41.5486 17.5327 41.772 17.5327 42.0698C17.57 42.4048 17.5886 42.6654 17.5886 42.8515ZM42.1009 15.1006C42.1009 13.9467 41.6542 12.8485 40.7608 11.8062C39.8674 10.7267 38.6949 9.81474 37.2431 9.07025C35.8286 8.32576 34.5257 7.71155 33.3345 7.22764C32.1433 6.74372 30.9708 6.33425 29.8168 5.99923H29.761C26.7458 11.2479 24.0656 17.4644 21.7205 24.6487C22.3161 24.4626 23.135 24.3323 24.1773 24.2578C25.2568 24.1462 25.9641 24.0531 26.2991 23.9787C27.6392 23.7553 29.0351 23.4575 30.4869 23.0853C31.9758 22.6758 33.6696 22.1174 35.568 21.4102C37.5037 20.7029 39.0671 19.8095 40.2583 18.73C41.4867 17.6133 42.1009 16.4035 42.1009 15.1006ZM42.4918 38.217C44.0552 36.6536 44.8369 35.1274 44.8369 33.6384C44.8369 32.1494 44.2227 30.8652 42.9943 29.7857C41.8031 28.6689 40.2769 27.85 38.4157 27.3289C36.5917 26.8077 34.8607 26.4355 33.2229 26.2121C31.585 25.9516 30.096 25.8213 28.7559 25.8213C28.3465 25.8213 27.5647 25.8957 26.4108 26.0446C25.2568 26.1563 24.1401 26.268 23.0606 26.3796C22.0183 26.4913 21.3855 26.5471 21.1621 26.5471C21.1249 26.5471 21.1063 26.5471 21.1063 26.5471C19.2078 32.4286 18.0539 36.9328 17.6444 40.0596C20.8457 41.3253 24.8101 41.9581 29.5376 41.9581C35.7169 41.9581 40.0349 40.7111 42.4918 38.217ZM62.2776 8.73523C62.2776 9.21915 61.924 9.83335 61.2167 10.5778C60.5094 11.3223 60.0627 11.8993 59.8766 12.3088C59.3927 13.5372 58.8716 14.2258 58.3132 14.3747C57.5687 14.3747 57.1965 13.7605 57.1965 12.5321C57.1965 11.7504 57.7734 10.8942 58.9274 9.96364C60.0814 9.03302 61.0864 8.56772 61.9426 8.56772C62.1287 8.56772 62.2404 8.62355 62.2776 8.73523ZM59.0949 18.2833C59.0205 18.395 58.7599 18.8603 58.3132 19.6792C57.9037 20.4982 57.5501 21.2054 57.2523 21.801C56.9545 22.3966 56.545 23.2714 56.0239 24.4254C55.5027 25.5793 55.0374 26.6774 54.628 27.7197C54.2185 28.762 53.7904 30.009 53.3437 31.4608C52.897 32.9125 52.5062 34.3643 52.1711 35.816C52.1339 35.9277 52.1153 36.0766 52.1153 36.2627C52.1153 36.7094 52.3014 36.9328 52.6737 36.9328C52.897 36.9328 53.4926 36.6536 54.4605 36.0952C55.4655 35.5369 56.1169 35.2577 56.4147 35.2577C56.6753 35.2577 56.8242 35.3321 56.8614 35.481C56.8614 35.9277 55.9122 36.7653 54.0138 37.9937C52.1153 39.1849 50.8125 39.7805 50.1052 39.7805C49.3979 39.7805 49.0443 39.4454 49.0443 38.7754C49.0443 38.4404 49.1187 38.0495 49.2676 37.6028C49.6771 36.4489 50.0866 35.2577 50.496 34.0293C50.9427 32.8009 51.2778 31.8516 51.5011 31.1816C51.7245 30.5116 51.9478 29.8229 52.1711 29.1156C52.4317 28.4084 52.6178 27.8872 52.7295 27.5522C52.8412 27.18 52.9342 26.8263 53.0087 26.4913C53.1204 26.1191 53.1948 25.8399 53.232 25.6538C53.2693 25.4676 53.2879 25.2815 53.2879 25.0954C53.2879 24.9465 53.2507 24.8162 53.1762 24.7045C53.139 24.5556 53.1204 24.444 53.1204 24.3695C53.1204 24.2206 53.1762 23.9787 53.2879 23.6436C54.1068 21.2985 54.8327 19.7351 55.4655 18.9534C56.0983 18.1716 57.0289 17.7808 58.2574 17.7808C58.7413 17.7808 59.0205 17.9483 59.0949 18.2833ZM81.2045 3.26323C81.3162 3.33768 81.372 3.50519 81.372 3.76576C81.372 4.36135 81.0742 5.47808 80.4786 7.11596C79.9203 8.71661 79.1199 10.8198 78.0776 13.4255C77.0726 15.994 76.2909 18.0972 75.7325 19.7351C75.7697 19.6978 75.807 19.6792 75.8442 19.6792C75.9931 19.6792 76.142 19.8095 76.2909 20.0701C76.477 20.3307 76.5701 20.5726 76.5701 20.796C76.5701 21.0193 76.3839 21.131 76.0117 21.131C75.5278 21.131 75.2672 21.0751 75.23 20.9635C74.4855 22.6386 73.5363 25.356 72.3823 29.1156C71.2656 32.8753 70.7072 35.1832 70.7072 36.0394C70.7072 36.8956 70.9492 37.3236 71.4331 37.3236C71.9914 37.3236 72.6429 37.0072 73.3874 36.3744C74.1319 35.7044 74.7833 35.0343 75.3416 34.3643C75.9372 33.6943 76.2909 33.3592 76.4025 33.3592C76.5142 33.3592 76.5701 33.4523 76.5701 33.6384C76.5701 33.7501 76.5328 33.899 76.4584 34.0851C76.4212 34.2712 76.3653 34.4387 76.2909 34.5876C76.2536 34.6993 76.2164 34.7551 76.1792 34.7551C75.323 35.6113 74.1319 36.5978 72.6056 37.7145C71.0794 38.794 69.8883 39.3338 69.0321 39.3338C68.3248 39.3338 67.9712 38.9429 67.9712 38.1612C67.9712 36.1511 68.6785 33.08 70.093 28.9481C68.4923 31.2188 66.5381 33.6012 64.2301 36.0952C61.9594 38.5893 60.1727 39.8363 58.8698 39.8363C58.0881 39.8363 57.6972 39.2779 57.6972 38.1612C57.6972 36.5605 58.2556 34.2526 59.3723 31.2374C60.4891 28.185 61.8105 25.4304 63.3367 22.9736C64.9002 20.4796 66.203 19.2325 67.2453 19.2325H67.4687C67.7292 19.2325 68.027 19.1022 68.3621 18.8417C68.7343 18.5439 69.1252 18.395 69.5346 18.395C70.093 18.395 70.8747 18.5439 71.8798 18.8417C72.9221 19.1395 73.4804 19.2884 73.5549 19.2884C73.5921 19.2884 73.6107 19.2698 73.6107 19.2325C76.2909 12.011 77.6682 8.28853 77.7426 8.06519C77.3332 8.06519 77.1284 7.84184 77.1284 7.39515C77.1284 6.35286 77.6868 4.99416 78.8035 3.31906C78.9524 3.02127 79.2502 2.87237 79.6969 2.87237C80.1808 2.87237 80.6834 3.00266 81.2045 3.26323ZM73.2199 20.5168C73.2199 20.1073 72.1217 19.9026 69.9255 19.9026C69.2927 19.9026 68.8274 19.9398 68.5296 20.0142C67.7106 20.2376 66.1286 22.4897 63.7834 26.7705C61.4755 31.0513 60.3216 34.1782 60.3216 36.1511C60.3216 36.7467 60.5077 37.0445 60.8799 37.0445C61.2522 37.0445 61.7919 36.7467 62.4992 36.1511C63.2065 35.5555 63.8579 34.9227 64.4535 34.2526C65.0491 33.5826 65.7005 32.8567 66.4078 32.075C67.115 31.256 67.4873 30.8094 67.5245 30.7349C68.5296 29.6182 69.4416 28.3153 70.2605 26.8263C71.1167 25.3001 71.8053 23.8856 72.3265 22.5827C72.8848 21.2799 73.1826 20.5912 73.2199 20.5168ZM132.306 12.4205C132.455 12.4205 132.622 12.4949 132.809 12.6438C133.032 12.7927 133.218 13.016 133.367 13.3138C133.553 13.5744 133.646 13.8536 133.646 14.1514C133.646 14.9331 133.479 15.9196 133.144 17.1107C130.463 26.0818 129.123 32.4472 129.123 36.2069C129.123 39.1104 129.886 40.5622 131.413 40.5622C132.753 40.5622 134.484 39.6316 136.605 37.7703C138.727 35.9091 140.793 33.5826 142.803 30.7907C144.813 27.9617 146.526 24.6859 147.94 20.9635C149.392 17.241 150.118 13.7233 150.118 10.4103C150.118 6.91123 149.15 4.80804 147.214 4.10078C146.656 3.91466 146.377 3.6727 146.377 3.3749C146.377 3.30045 146.414 3.226 146.489 3.15155C146.563 3.03988 146.656 2.96543 146.768 2.92821C146.917 2.89098 147.084 2.87237 147.27 2.87237C148.796 2.87237 150.081 3.50519 151.123 4.77082C152.203 5.99923 152.742 7.786 152.742 10.1311C152.742 13.4441 151.886 17.1107 150.174 21.131C148.461 25.114 146.414 28.6876 144.032 31.8516C141.649 34.9785 139.155 37.6028 136.55 39.7246C133.981 41.8836 131.841 42.9631 130.128 42.9631C127.82 42.9631 126.667 40.8786 126.667 36.7094C126.667 35.2949 126.797 33.6198 127.057 31.6841C127.355 29.7112 127.653 27.9989 127.951 26.5471C128.249 25.0582 128.621 23.3458 129.067 21.4102C129.514 19.4373 129.793 18.153 129.905 17.5574C127.15 19.7537 124.247 22.7502 121.195 26.5471C118.142 30.344 115.834 33.4523 114.271 35.8719C112.745 38.2915 111.386 40.5436 110.195 42.6281V42.5723C109.339 44.1729 108.501 44.9733 107.682 44.9733C107.31 44.9733 107.012 44.8058 106.789 44.4707C106.603 44.1729 106.509 43.7449 106.509 43.1865C106.509 42.7026 106.584 42.2 106.733 41.6789C106.844 41.3067 107.719 38.6637 109.357 33.7501C110.995 28.8365 112.372 24.1089 113.489 19.5676C114.643 15.0262 115.22 11.3223 115.22 8.45604C115.22 6.33425 114.736 4.82665 113.768 3.93327C112.838 3.00266 111.256 2.53735 109.022 2.53735C107.608 2.53735 105.932 2.7607 103.997 3.20739C102.061 3.65408 100.014 4.36135 97.8548 5.32919C95.733 6.29702 93.7601 7.43237 91.9361 8.73523C90.1493 10.0009 88.6603 11.5829 87.4691 13.4813C86.2779 15.3426 85.6823 17.3155 85.6823 19.4C85.6823 21.6335 86.5757 23.5134 88.3625 25.0396C90.1865 26.5658 92.2525 27.3289 94.5604 27.3289C96.6077 27.3289 98.0781 27.0125 98.9715 26.3796C99.0459 26.3052 99.1204 26.2494 99.1948 26.2121C99.3065 26.1749 99.3996 26.1563 99.474 26.1563C99.5485 26.1191 99.6229 26.1005 99.6974 26.1005C99.9207 26.1005 100.032 26.1935 100.032 26.3796C100.032 26.6402 99.7718 26.9194 99.2507 27.2172C98.1712 27.85 96.4961 28.1664 94.2254 28.1664C93.8903 28.1664 93.4995 28.1664 93.0528 28.1664C90.5588 28.092 88.3253 27.2172 86.3524 25.5421C84.4167 23.867 83.4489 21.7638 83.4489 19.2325C83.4489 16.7385 84.305 14.3375 86.0174 12.0296C87.7669 9.68445 89.9259 7.76739 92.4944 6.27841C95.1001 4.75221 97.8548 3.54241 100.758 2.64902C103.699 1.71841 106.416 1.2531 108.91 1.2531C115.276 1.2531 118.459 4.06355 118.459 9.68445C118.459 10.8384 118.347 12.0482 118.123 13.3138C117.937 14.5795 117.565 16.0871 117.007 17.8366C116.486 19.5489 116.095 20.796 115.834 21.5777C115.574 22.3222 115.015 23.8111 114.159 26.0446C113.34 28.2781 112.875 29.5251 112.763 29.7857C111.535 33.2103 110.809 35.8719 110.586 37.7703C118.44 27.8686 124.172 20.889 127.783 16.8316C128.081 16.4965 128.453 16.0685 128.9 15.5473C130.017 14.2817 130.78 13.4441 131.189 13.0347C131.636 12.6252 132.008 12.4205 132.306 12.4205ZM162.282 8.73523C162.282 9.21915 161.928 9.83335 161.221 10.5778C160.514 11.3223 160.067 11.8993 159.881 12.3088C159.397 13.5372 158.876 14.2258 158.318 14.3747C157.573 14.3747 157.201 13.7605 157.201 12.5321C157.201 11.7504 157.778 10.8942 158.932 9.96364C160.086 9.03302 161.091 8.56772 161.947 8.56772C162.133 8.56772 162.245 8.62355 162.282 8.73523ZM159.099 18.2833C159.025 18.395 158.764 18.8603 158.318 19.6792C157.908 20.4982 157.555 21.2054 157.257 21.801C156.959 22.3966 156.549 23.2714 156.028 24.4254C155.507 25.5793 155.042 26.6774 154.632 27.7197C154.223 28.762 153.795 30.009 153.348 31.4608C152.901 32.9125 152.511 34.3643 152.176 35.816C152.138 35.9277 152.12 36.0766 152.12 36.2627C152.12 36.7094 152.306 36.9328 152.678 36.9328C152.901 36.9328 153.497 36.6536 154.465 36.0952C155.47 35.5369 156.121 35.2577 156.419 35.2577C156.68 35.2577 156.829 35.3321 156.866 35.481C156.866 35.9277 155.917 36.7653 154.018 37.9937C152.12 39.1849 150.817 39.7805 150.11 39.7805C149.402 39.7805 149.049 39.4454 149.049 38.7754C149.049 38.4404 149.123 38.0495 149.272 37.6028C149.682 36.4489 150.091 35.2577 150.501 34.0293C150.947 32.8009 151.282 31.8516 151.506 31.1816C151.729 30.5116 151.952 29.8229 152.176 29.1156C152.436 28.4084 152.622 27.8872 152.734 27.5522C152.846 27.18 152.939 26.8263 153.013 26.4913C153.125 26.1191 153.199 25.8399 153.237 25.6538C153.274 25.4676 153.292 25.2815 153.292 25.0954C153.292 24.9465 153.255 24.8162 153.181 24.7045C153.143 24.5556 153.125 24.444 153.125 24.3695C153.125 24.2206 153.181 23.9787 153.292 23.6436C154.111 21.2985 154.837 19.7351 155.47 18.9534C156.103 18.1716 157.033 17.7808 158.262 17.7808C158.746 17.7808 159.025 17.9483 159.099 18.2833ZM177.524 18.6742C175.625 21.8382 173.857 25.4676 172.219 29.5623C170.581 33.657 169.762 36.728 169.762 38.7754C169.762 39.4454 169.911 39.7805 170.209 39.7805C170.321 39.7805 170.674 39.5943 171.27 39.2221C171.903 38.8498 172.275 38.6637 172.387 38.6637C172.61 38.6637 172.722 38.7754 172.722 38.9987C172.722 39.4454 172.312 39.948 171.493 40.5063C170.674 41.0647 169.855 41.3439 169.037 41.3439C167.957 41.3439 167.417 40.5436 167.417 38.9429C167.417 37.4911 167.715 35.7974 168.311 33.8618C168.906 31.9261 169.837 29.4507 171.103 26.4355C172.368 23.4203 173.001 21.8941 173.001 21.8569C173.187 21.3729 173.28 21.0007 173.28 20.7401C173.28 20.554 173.224 20.4609 173.113 20.4609C172.927 20.4609 172.517 20.796 171.884 21.466C170.284 23.2528 167.994 26.3052 165.016 30.6232C162.038 34.9413 160.512 37.6028 160.438 38.6079C160.4 38.8685 160.047 39.2221 159.377 39.6688C158.707 40.1527 158.148 40.3947 157.702 40.3947C157.441 40.3947 157.292 40.2644 157.255 40.0038C157.329 40.1155 158.018 38.2543 159.321 34.4201C160.661 30.586 161.61 27.8128 162.169 26.1005C162.318 25.6538 162.392 25.3187 162.392 25.0954C162.392 24.9465 162.355 24.8162 162.28 24.7045C162.243 24.5556 162.224 24.444 162.224 24.3695C162.224 24.2206 162.28 23.9787 162.392 23.6436C163.248 21.2613 163.974 19.6978 164.57 18.9534C165.165 18.1716 166.077 17.7808 167.306 17.7808C167.79 17.7808 168.069 17.9483 168.143 18.2833C165.091 24.537 163.267 29.004 162.671 31.6841C168.813 21.7824 173.522 16.8316 176.798 16.8316C177.542 16.8316 177.915 17.0735 177.915 17.5574C177.915 17.8925 177.784 18.2647 177.524 18.6742Z"
                fill="url(#paint0_linear_2555_618)"
              />
              <defs>
                <linearGradient
                  id="paint0_linear_2555_618"
                  x1="0"
                  y1="26.4454"
                  x2="176"
                  y2="26.4454"
                  gradientUnits="userSpaceOnUse"
                >
                  <stop stop-color="#B6013C" />
                  <stop offset="0.505" stop-color="#F78901" />
                  <stop offset="1" stop-color="#00AFEE" />
                </linearGradient>
              </defs>
            </svg>
          </NavLink>
        </Grid>
        <HeaderIcons
          index={1}
          iconClassName=""
          insideColor="#e85a4f"
          onClickFunction={toggleDrawer(false)}
          key={"1"}
        />
      </Grid>
      <Divider color="#e85a4f" />
      <Grid
        item
        sx={{
          display: "flex",
          flexDirection: "column",
          justifyContent: "center",
          alignItems: "center",
          width: "100%",
          padding: "5px 10px",
        }}
      >
        {user ? (
          <Accordion className="custome-accordian-drawer">
            <AccordionSummary
              expandIcon={
                <HeaderIcons
                  index={2}
                  iconClassName=""
                  outSideColor="#d8c3a5"
                  insideColor="#e85a4f"
                  key={"2"}
                />
              }
              aria-controls="panel2-content"
              id="profile-accordion"
            >
              <Grid
                item
                sx={{
                  display: "flex",
                  alignItems: "center",
                  justifyContent: "center",
                  flexDirection: "row",
                }}
                gap={"5px"}
              >
                {userInfo !== undefined ? (
                  <img
                    src={
                      userInfo.image === null ? defaultImage : userInfo.image
                    }
                    alt={userInfo.username}
                    className="avatarImage"
                  />
                ) : (
                  <Skeleton variant="circular">
                    <Avatar />
                  </Skeleton>
                )}
                <Grid
                  item
                  sx={{
                    display: "flex",
                    flexDirection: "column",
                    justifyContent: "center",
                    alignItems: "flex-start",
                  }}
                >
                  {userInfo !== undefined ? (
                    <span className="nameSpan">
                      {`${userInfo.name} \u00A0 ${userInfo.last_name}`}
                    </span>
                  ) : (
                    <span className="nameSpan">
                      {`نام \u00A0 نام خانوادگی`}
                    </span>
                  )}
                  {userInfo !== undefined ? (
                    <span className="usernameSpan">{userInfo.username}</span>
                  ) : (
                    <span className="usernameSpan">username</span>
                  )}
                </Grid>
              </Grid>
            </AccordionSummary>
            <AccordionDetails className="header-shop-sx">
              {navItems.map((elm) => (
                <Grid
                  className={`${elm.className} ${
                    props.activeTab === elm.tabNumber ? "activeTab" : ""
                  }`}
                  onClick={() => handleClickOnHeaderItemSX(elm.tabNumber)}
                >
                  <NavbarIcon
                    index={elm.iconNumber}
                    iconClassName={elm.iconClass}
                  />
                  <span>{elm.text}</span>
                </Grid>
              ))}
            </AccordionDetails>
          </Accordion>
        ) : (
          <></>
        )}
      </Grid>
      {user ? <Divider color="#e85a4f" /> : ""}
      <List className="drawer-list">
        {drawerBottomList.map((item, index) => (
          <ListItem style={{ marginTop: 0 }}>
            <NavItems
              className={item.className}
              direction={item.direction}
              key={index}
            >
              <HeaderIcons
                index={item.iconNumber}
                iconClassName={item.iconClassName}
                outSideColor={item.iconOutSideColor}
                insideColor={item.iconInSideColor}
                key={index}
              />
              <span className={item.spanClassName}>{item.content}</span>
            </NavItems>
          </ListItem>
        ))}
      </List>
      <Divider color="#e85a4f" style={{ width: "100%" }} />

      <Grid
        item
        sx={{
          display: "flex",
          justifyContent: "center",
          alignItems: "center",
          width: "100%",
          padding: "5px 10px",
        }}
      >
        <Accordion className="custome-accordian-drawer-2">
          <AccordionSummary
            expandIcon={
              <svg
                width="24"
                height="24"
                viewBox="0 0 24 24"
                fill="#d8c3a5"
                xmlns="http://www.w3.org/2000/svg"
              >
                <path
                  d="M15.5179 7L8.48207 7C6.93849 7 5.97675 8.67443 6.75451 10.0077L10.2724 16.0385C11.0442 17.3615 12.9558 17.3615 13.7276 16.0385L17.2455 10.0077C18.0232 8.67443 17.0615 7 15.5179 7Z"
                  stroke="#8e8d8a"
                  strokeWidth="1.5"
                  strokeLinejoin="round"
                />
              </svg>
            }
            aria-controls="panel2-content"
            id="panel2-header"
          >
            <HeaderIcons
              index={5}
              iconClassName=""
              outSideColor="#d8c3a5"
              insideColor="#8e8d8a"
              key={5}
            />

            <Typography
              className="spanNavClass"
              style={{ paddingRight: "10px" }}
            >
              دسته‌بندی‌ها
            </Typography>
          </AccordionSummary>
          <AccordionDetails className="header-shop-sx">
            <ul className="accor-parent-sx-categori">
              {menuCategories.map((element) => (
                <li
                  className={element.className}
                  onClick={element.clickFunc}
                  key={element.content}
                >
                  <NavLink
                    to={element.linkTo}
                    className={element.linkClassName}
                  >
                    {element.label}
                  </NavLink>
                </li>
              ))}
            </ul>
          </AccordionDetails>
        </Accordion>
      </Grid>
      <Divider color="#e85a4f" style={{ width: "100%" }} />
      <Grid
        item
        sx={{
          display: "flex",
          justifyContent: "center",
          alignItems: "center",
          width: "100%",
          flexDirection: "column",
          padding: "23px 10px",
        }}
      >
        {user ? (
          <Box
            className="nav-link-custome nav-color"
            key="12"
            onClick={handleLogOut}
          >
            <NavbarIcon index={8} iconClassName="" insideColor="#e85a4f" />
            <span>خروج از حساب کاربری</span>
          </Box>
        ) : (
          <NavItems
            className="nav-link-custome nav-color"
            direction="/signup"
            key="11"
            style={{ width: "100%" }}
          >
            <NavbarIcon index={9} iconClassName="" insideColor="#e85a4f" />
            <span>ورود/ثبت‌نام</span>
          </NavItems>
        )}
      </Grid>
    </Box>
  );

  return (
    <HideOnScroll {...props}>
      <AppBar style={{ position: "sticky" }}>
        <Drawer
          anchor="right"
          open={openDrawer}
          className="drawerScrollbar"
          onClose={toggleDrawer(false)}
        >
          {DrawerList}
        </Drawer>
        <Toolbar
          sx={{
            display: "flex",
            justifyContent: "space-between",
            alignItems: "center",
            flexDirection: "row",
            width: "100%",
          }}
          className="header container-custome-header"
        >
          <Grid
            item
            sx={{
              display: "flex",
              justifyContent: "center",
              alignItems: "center",
              flexDirection: "row-reverse",
            }}
            className="header-Logo"
            gap={"5px"}
          >
            <NavLink to={"/"}>
              <img
                src={bidWinLogo}
                alt="BidWin Logo"
                className="logo-bird-header"
              />
              <svg
                className="bidwinSvg"
                width="178"
                height="45"
                viewBox="0 0 178 45"
                fill="none"
                xmlns="http://www.w3.org/2000/svg"
              >
                <path
                  d="M17.5886 42.8515C17.5886 43.5215 17.4583 43.8565 17.1977 43.8565C16.9371 43.8565 16.6952 43.6332 16.4718 43.1865C16.2857 42.7398 16.1554 42.3117 16.081 41.9023C16.0438 41.4928 16.0251 41.1578 16.0251 40.8972C15.1318 40.4877 14.1825 39.948 13.1775 39.2779C12.1724 38.6079 11.6699 37.9751 11.6699 37.3795C11.6699 37.1561 11.7629 37.0445 11.9491 37.0445C12.0607 37.0445 12.3958 37.2306 12.9541 37.6028C13.5125 37.9378 14.1081 38.3287 14.7409 38.7754C15.4109 39.1849 15.839 39.4268 16.0251 39.5013C16.0251 35.4066 17.1605 29.9346 19.4312 23.0853C21.7391 16.236 24.1215 10.2987 26.5783 5.27335C22.0741 4.19384 18.24 3.65408 15.0759 3.65408C13.5125 3.65408 12.0235 3.80298 10.609 4.10078C9.19445 4.36135 7.83576 4.80804 6.5329 5.44086C5.23004 6.03645 4.18776 6.94845 3.40604 8.17686C2.62433 9.40527 2.23347 10.857 2.23347 12.5321C2.23347 16.329 4.03886 19.9026 7.64963 23.2528C7.79853 22.5083 7.98465 22.136 8.208 22.136C8.46857 22.136 8.78498 22.5455 9.15723 23.3645C9.5667 24.1462 9.77143 24.6859 9.77143 24.9837C9.77143 25.4676 9.43641 25.7096 8.76637 25.7096C7.38906 25.7096 5.99314 24.9279 4.57861 23.3645C3.20131 21.7638 2.10318 19.977 1.28425 18.0041C0.502531 16.0312 0.111673 14.3561 0.111673 12.9788C0.111673 10.9315 0.558367 9.18192 1.45176 7.73017C2.38237 6.24119 3.62939 5.12445 5.19282 4.37996C6.75625 3.63547 8.37551 3.09572 10.0506 2.7607C11.7257 2.42568 13.5125 2.25817 15.4109 2.25817C18.8356 2.25817 22.8 2.74208 27.3042 3.70992C27.8253 2.48151 28.3837 1.60674 28.9793 1.08559C29.0165 1.08559 29.0537 1.08559 29.0909 1.08559C29.2398 1.08559 29.4074 1.06698 29.5935 1.02976C29.7796 0.992533 29.9843 0.955308 30.2077 0.918082C30.431 0.843634 30.6171 0.80641 30.766 0.80641C31.8083 0.80641 32.3295 1.02976 32.3295 1.47645C32.3295 1.51368 32.3109 1.5509 32.2736 1.58812C32.2736 1.62535 32.2736 1.66257 32.2736 1.6998C31.8642 2.25817 31.3244 3.17017 30.6544 4.4358C32.0317 4.80804 33.4276 5.27335 34.8421 5.83171C36.2567 6.35286 37.7643 7.04151 39.3649 7.89768C40.9656 8.75384 42.2498 9.79612 43.2176 11.0245C44.2227 12.2529 44.7252 13.5744 44.7252 14.9889C44.7252 16.2918 44.2971 17.5016 43.441 18.6183C42.622 19.6978 41.5053 20.6285 40.0908 21.4102C38.7135 22.1547 37.4106 22.7689 36.1822 23.2528C34.991 23.7367 33.744 24.1462 32.4411 24.4812C33.7812 24.5556 35.233 24.7604 36.7964 25.0954C38.3598 25.4304 39.9791 25.9143 41.6542 26.5471C43.3293 27.18 44.7066 28.0734 45.7861 29.2273C46.9029 30.3813 47.4612 31.6841 47.4612 33.1359C47.4612 34.5504 46.8098 35.9463 45.5069 37.3236C41.7473 41.2694 36.4056 43.2423 29.4818 43.2423C24.9032 43.2423 20.9202 42.6281 17.5327 41.3997C17.5327 41.5486 17.5327 41.772 17.5327 42.0698C17.57 42.4048 17.5886 42.6654 17.5886 42.8515ZM42.1009 15.1006C42.1009 13.9467 41.6542 12.8485 40.7608 11.8062C39.8674 10.7267 38.6949 9.81474 37.2431 9.07025C35.8286 8.32576 34.5257 7.71155 33.3345 7.22764C32.1433 6.74372 30.9708 6.33425 29.8168 5.99923H29.761C26.7458 11.2479 24.0656 17.4644 21.7205 24.6487C22.3161 24.4626 23.135 24.3323 24.1773 24.2578C25.2568 24.1462 25.9641 24.0531 26.2991 23.9787C27.6392 23.7553 29.0351 23.4575 30.4869 23.0853C31.9758 22.6758 33.6696 22.1174 35.568 21.4102C37.5037 20.7029 39.0671 19.8095 40.2583 18.73C41.4867 17.6133 42.1009 16.4035 42.1009 15.1006ZM42.4918 38.217C44.0552 36.6536 44.8369 35.1274 44.8369 33.6384C44.8369 32.1494 44.2227 30.8652 42.9943 29.7857C41.8031 28.6689 40.2769 27.85 38.4157 27.3289C36.5917 26.8077 34.8607 26.4355 33.2229 26.2121C31.585 25.9516 30.096 25.8213 28.7559 25.8213C28.3465 25.8213 27.5647 25.8957 26.4108 26.0446C25.2568 26.1563 24.1401 26.268 23.0606 26.3796C22.0183 26.4913 21.3855 26.5471 21.1621 26.5471C21.1249 26.5471 21.1063 26.5471 21.1063 26.5471C19.2078 32.4286 18.0539 36.9328 17.6444 40.0596C20.8457 41.3253 24.8101 41.9581 29.5376 41.9581C35.7169 41.9581 40.0349 40.7111 42.4918 38.217ZM62.2776 8.73523C62.2776 9.21915 61.924 9.83335 61.2167 10.5778C60.5094 11.3223 60.0627 11.8993 59.8766 12.3088C59.3927 13.5372 58.8716 14.2258 58.3132 14.3747C57.5687 14.3747 57.1965 13.7605 57.1965 12.5321C57.1965 11.7504 57.7734 10.8942 58.9274 9.96364C60.0814 9.03302 61.0864 8.56772 61.9426 8.56772C62.1287 8.56772 62.2404 8.62355 62.2776 8.73523ZM59.0949 18.2833C59.0205 18.395 58.7599 18.8603 58.3132 19.6792C57.9037 20.4982 57.5501 21.2054 57.2523 21.801C56.9545 22.3966 56.545 23.2714 56.0239 24.4254C55.5027 25.5793 55.0374 26.6774 54.628 27.7197C54.2185 28.762 53.7904 30.009 53.3437 31.4608C52.897 32.9125 52.5062 34.3643 52.1711 35.816C52.1339 35.9277 52.1153 36.0766 52.1153 36.2627C52.1153 36.7094 52.3014 36.9328 52.6737 36.9328C52.897 36.9328 53.4926 36.6536 54.4605 36.0952C55.4655 35.5369 56.1169 35.2577 56.4147 35.2577C56.6753 35.2577 56.8242 35.3321 56.8614 35.481C56.8614 35.9277 55.9122 36.7653 54.0138 37.9937C52.1153 39.1849 50.8125 39.7805 50.1052 39.7805C49.3979 39.7805 49.0443 39.4454 49.0443 38.7754C49.0443 38.4404 49.1187 38.0495 49.2676 37.6028C49.6771 36.4489 50.0866 35.2577 50.496 34.0293C50.9427 32.8009 51.2778 31.8516 51.5011 31.1816C51.7245 30.5116 51.9478 29.8229 52.1711 29.1156C52.4317 28.4084 52.6178 27.8872 52.7295 27.5522C52.8412 27.18 52.9342 26.8263 53.0087 26.4913C53.1204 26.1191 53.1948 25.8399 53.232 25.6538C53.2693 25.4676 53.2879 25.2815 53.2879 25.0954C53.2879 24.9465 53.2507 24.8162 53.1762 24.7045C53.139 24.5556 53.1204 24.444 53.1204 24.3695C53.1204 24.2206 53.1762 23.9787 53.2879 23.6436C54.1068 21.2985 54.8327 19.7351 55.4655 18.9534C56.0983 18.1716 57.0289 17.7808 58.2574 17.7808C58.7413 17.7808 59.0205 17.9483 59.0949 18.2833ZM81.2045 3.26323C81.3162 3.33768 81.372 3.50519 81.372 3.76576C81.372 4.36135 81.0742 5.47808 80.4786 7.11596C79.9203 8.71661 79.1199 10.8198 78.0776 13.4255C77.0726 15.994 76.2909 18.0972 75.7325 19.7351C75.7697 19.6978 75.807 19.6792 75.8442 19.6792C75.9931 19.6792 76.142 19.8095 76.2909 20.0701C76.477 20.3307 76.5701 20.5726 76.5701 20.796C76.5701 21.0193 76.3839 21.131 76.0117 21.131C75.5278 21.131 75.2672 21.0751 75.23 20.9635C74.4855 22.6386 73.5363 25.356 72.3823 29.1156C71.2656 32.8753 70.7072 35.1832 70.7072 36.0394C70.7072 36.8956 70.9492 37.3236 71.4331 37.3236C71.9914 37.3236 72.6429 37.0072 73.3874 36.3744C74.1319 35.7044 74.7833 35.0343 75.3416 34.3643C75.9372 33.6943 76.2909 33.3592 76.4025 33.3592C76.5142 33.3592 76.5701 33.4523 76.5701 33.6384C76.5701 33.7501 76.5328 33.899 76.4584 34.0851C76.4212 34.2712 76.3653 34.4387 76.2909 34.5876C76.2536 34.6993 76.2164 34.7551 76.1792 34.7551C75.323 35.6113 74.1319 36.5978 72.6056 37.7145C71.0794 38.794 69.8883 39.3338 69.0321 39.3338C68.3248 39.3338 67.9712 38.9429 67.9712 38.1612C67.9712 36.1511 68.6785 33.08 70.093 28.9481C68.4923 31.2188 66.5381 33.6012 64.2301 36.0952C61.9594 38.5893 60.1727 39.8363 58.8698 39.8363C58.0881 39.8363 57.6972 39.2779 57.6972 38.1612C57.6972 36.5605 58.2556 34.2526 59.3723 31.2374C60.4891 28.185 61.8105 25.4304 63.3367 22.9736C64.9002 20.4796 66.203 19.2325 67.2453 19.2325H67.4687C67.7292 19.2325 68.027 19.1022 68.3621 18.8417C68.7343 18.5439 69.1252 18.395 69.5346 18.395C70.093 18.395 70.8747 18.5439 71.8798 18.8417C72.9221 19.1395 73.4804 19.2884 73.5549 19.2884C73.5921 19.2884 73.6107 19.2698 73.6107 19.2325C76.2909 12.011 77.6682 8.28853 77.7426 8.06519C77.3332 8.06519 77.1284 7.84184 77.1284 7.39515C77.1284 6.35286 77.6868 4.99416 78.8035 3.31906C78.9524 3.02127 79.2502 2.87237 79.6969 2.87237C80.1808 2.87237 80.6834 3.00266 81.2045 3.26323ZM73.2199 20.5168C73.2199 20.1073 72.1217 19.9026 69.9255 19.9026C69.2927 19.9026 68.8274 19.9398 68.5296 20.0142C67.7106 20.2376 66.1286 22.4897 63.7834 26.7705C61.4755 31.0513 60.3216 34.1782 60.3216 36.1511C60.3216 36.7467 60.5077 37.0445 60.8799 37.0445C61.2522 37.0445 61.7919 36.7467 62.4992 36.1511C63.2065 35.5555 63.8579 34.9227 64.4535 34.2526C65.0491 33.5826 65.7005 32.8567 66.4078 32.075C67.115 31.256 67.4873 30.8094 67.5245 30.7349C68.5296 29.6182 69.4416 28.3153 70.2605 26.8263C71.1167 25.3001 71.8053 23.8856 72.3265 22.5827C72.8848 21.2799 73.1826 20.5912 73.2199 20.5168ZM132.306 12.4205C132.455 12.4205 132.622 12.4949 132.809 12.6438C133.032 12.7927 133.218 13.016 133.367 13.3138C133.553 13.5744 133.646 13.8536 133.646 14.1514C133.646 14.9331 133.479 15.9196 133.144 17.1107C130.463 26.0818 129.123 32.4472 129.123 36.2069C129.123 39.1104 129.886 40.5622 131.413 40.5622C132.753 40.5622 134.484 39.6316 136.605 37.7703C138.727 35.9091 140.793 33.5826 142.803 30.7907C144.813 27.9617 146.526 24.6859 147.94 20.9635C149.392 17.241 150.118 13.7233 150.118 10.4103C150.118 6.91123 149.15 4.80804 147.214 4.10078C146.656 3.91466 146.377 3.6727 146.377 3.3749C146.377 3.30045 146.414 3.226 146.489 3.15155C146.563 3.03988 146.656 2.96543 146.768 2.92821C146.917 2.89098 147.084 2.87237 147.27 2.87237C148.796 2.87237 150.081 3.50519 151.123 4.77082C152.203 5.99923 152.742 7.786 152.742 10.1311C152.742 13.4441 151.886 17.1107 150.174 21.131C148.461 25.114 146.414 28.6876 144.032 31.8516C141.649 34.9785 139.155 37.6028 136.55 39.7246C133.981 41.8836 131.841 42.9631 130.128 42.9631C127.82 42.9631 126.667 40.8786 126.667 36.7094C126.667 35.2949 126.797 33.6198 127.057 31.6841C127.355 29.7112 127.653 27.9989 127.951 26.5471C128.249 25.0582 128.621 23.3458 129.067 21.4102C129.514 19.4373 129.793 18.153 129.905 17.5574C127.15 19.7537 124.247 22.7502 121.195 26.5471C118.142 30.344 115.834 33.4523 114.271 35.8719C112.745 38.2915 111.386 40.5436 110.195 42.6281V42.5723C109.339 44.1729 108.501 44.9733 107.682 44.9733C107.31 44.9733 107.012 44.8058 106.789 44.4707C106.603 44.1729 106.509 43.7449 106.509 43.1865C106.509 42.7026 106.584 42.2 106.733 41.6789C106.844 41.3067 107.719 38.6637 109.357 33.7501C110.995 28.8365 112.372 24.1089 113.489 19.5676C114.643 15.0262 115.22 11.3223 115.22 8.45604C115.22 6.33425 114.736 4.82665 113.768 3.93327C112.838 3.00266 111.256 2.53735 109.022 2.53735C107.608 2.53735 105.932 2.7607 103.997 3.20739C102.061 3.65408 100.014 4.36135 97.8548 5.32919C95.733 6.29702 93.7601 7.43237 91.9361 8.73523C90.1493 10.0009 88.6603 11.5829 87.4691 13.4813C86.2779 15.3426 85.6823 17.3155 85.6823 19.4C85.6823 21.6335 86.5757 23.5134 88.3625 25.0396C90.1865 26.5658 92.2525 27.3289 94.5604 27.3289C96.6077 27.3289 98.0781 27.0125 98.9715 26.3796C99.0459 26.3052 99.1204 26.2494 99.1948 26.2121C99.3065 26.1749 99.3996 26.1563 99.474 26.1563C99.5485 26.1191 99.6229 26.1005 99.6974 26.1005C99.9207 26.1005 100.032 26.1935 100.032 26.3796C100.032 26.6402 99.7718 26.9194 99.2507 27.2172C98.1712 27.85 96.4961 28.1664 94.2254 28.1664C93.8903 28.1664 93.4995 28.1664 93.0528 28.1664C90.5588 28.092 88.3253 27.2172 86.3524 25.5421C84.4167 23.867 83.4489 21.7638 83.4489 19.2325C83.4489 16.7385 84.305 14.3375 86.0174 12.0296C87.7669 9.68445 89.9259 7.76739 92.4944 6.27841C95.1001 4.75221 97.8548 3.54241 100.758 2.64902C103.699 1.71841 106.416 1.2531 108.91 1.2531C115.276 1.2531 118.459 4.06355 118.459 9.68445C118.459 10.8384 118.347 12.0482 118.123 13.3138C117.937 14.5795 117.565 16.0871 117.007 17.8366C116.486 19.5489 116.095 20.796 115.834 21.5777C115.574 22.3222 115.015 23.8111 114.159 26.0446C113.34 28.2781 112.875 29.5251 112.763 29.7857C111.535 33.2103 110.809 35.8719 110.586 37.7703C118.44 27.8686 124.172 20.889 127.783 16.8316C128.081 16.4965 128.453 16.0685 128.9 15.5473C130.017 14.2817 130.78 13.4441 131.189 13.0347C131.636 12.6252 132.008 12.4205 132.306 12.4205ZM162.282 8.73523C162.282 9.21915 161.928 9.83335 161.221 10.5778C160.514 11.3223 160.067 11.8993 159.881 12.3088C159.397 13.5372 158.876 14.2258 158.318 14.3747C157.573 14.3747 157.201 13.7605 157.201 12.5321C157.201 11.7504 157.778 10.8942 158.932 9.96364C160.086 9.03302 161.091 8.56772 161.947 8.56772C162.133 8.56772 162.245 8.62355 162.282 8.73523ZM159.099 18.2833C159.025 18.395 158.764 18.8603 158.318 19.6792C157.908 20.4982 157.555 21.2054 157.257 21.801C156.959 22.3966 156.549 23.2714 156.028 24.4254C155.507 25.5793 155.042 26.6774 154.632 27.7197C154.223 28.762 153.795 30.009 153.348 31.4608C152.901 32.9125 152.511 34.3643 152.176 35.816C152.138 35.9277 152.12 36.0766 152.12 36.2627C152.12 36.7094 152.306 36.9328 152.678 36.9328C152.901 36.9328 153.497 36.6536 154.465 36.0952C155.47 35.5369 156.121 35.2577 156.419 35.2577C156.68 35.2577 156.829 35.3321 156.866 35.481C156.866 35.9277 155.917 36.7653 154.018 37.9937C152.12 39.1849 150.817 39.7805 150.11 39.7805C149.402 39.7805 149.049 39.4454 149.049 38.7754C149.049 38.4404 149.123 38.0495 149.272 37.6028C149.682 36.4489 150.091 35.2577 150.501 34.0293C150.947 32.8009 151.282 31.8516 151.506 31.1816C151.729 30.5116 151.952 29.8229 152.176 29.1156C152.436 28.4084 152.622 27.8872 152.734 27.5522C152.846 27.18 152.939 26.8263 153.013 26.4913C153.125 26.1191 153.199 25.8399 153.237 25.6538C153.274 25.4676 153.292 25.2815 153.292 25.0954C153.292 24.9465 153.255 24.8162 153.181 24.7045C153.143 24.5556 153.125 24.444 153.125 24.3695C153.125 24.2206 153.181 23.9787 153.292 23.6436C154.111 21.2985 154.837 19.7351 155.47 18.9534C156.103 18.1716 157.033 17.7808 158.262 17.7808C158.746 17.7808 159.025 17.9483 159.099 18.2833ZM177.524 18.6742C175.625 21.8382 173.857 25.4676 172.219 29.5623C170.581 33.657 169.762 36.728 169.762 38.7754C169.762 39.4454 169.911 39.7805 170.209 39.7805C170.321 39.7805 170.674 39.5943 171.27 39.2221C171.903 38.8498 172.275 38.6637 172.387 38.6637C172.61 38.6637 172.722 38.7754 172.722 38.9987C172.722 39.4454 172.312 39.948 171.493 40.5063C170.674 41.0647 169.855 41.3439 169.037 41.3439C167.957 41.3439 167.417 40.5436 167.417 38.9429C167.417 37.4911 167.715 35.7974 168.311 33.8618C168.906 31.9261 169.837 29.4507 171.103 26.4355C172.368 23.4203 173.001 21.8941 173.001 21.8569C173.187 21.3729 173.28 21.0007 173.28 20.7401C173.28 20.554 173.224 20.4609 173.113 20.4609C172.927 20.4609 172.517 20.796 171.884 21.466C170.284 23.2528 167.994 26.3052 165.016 30.6232C162.038 34.9413 160.512 37.6028 160.438 38.6079C160.4 38.8685 160.047 39.2221 159.377 39.6688C158.707 40.1527 158.148 40.3947 157.702 40.3947C157.441 40.3947 157.292 40.2644 157.255 40.0038C157.329 40.1155 158.018 38.2543 159.321 34.4201C160.661 30.586 161.61 27.8128 162.169 26.1005C162.318 25.6538 162.392 25.3187 162.392 25.0954C162.392 24.9465 162.355 24.8162 162.28 24.7045C162.243 24.5556 162.224 24.444 162.224 24.3695C162.224 24.2206 162.28 23.9787 162.392 23.6436C163.248 21.2613 163.974 19.6978 164.57 18.9534C165.165 18.1716 166.077 17.7808 167.306 17.7808C167.79 17.7808 168.069 17.9483 168.143 18.2833C165.091 24.537 163.267 29.004 162.671 31.6841C168.813 21.7824 173.522 16.8316 176.798 16.8316C177.542 16.8316 177.915 17.0735 177.915 17.5574C177.915 17.8925 177.784 18.2647 177.524 18.6742Z"
                  fill="url(#paint0_linear_2555_618)"
                />
                <defs>
                  <linearGradient
                    id="paint0_linear_2555_618"
                    x1="0"
                    y1="26.4454"
                    x2="176"
                    y2="26.4454"
                    gradientUnits="userSpaceOnUse"
                  >
                    <stop stop-color="#B6013C" />
                    <stop offset="0.505" stop-color="#F78901" />
                    <stop offset="1" stop-color="#00AFEE" />
                  </linearGradient>
                </defs>
              </svg>
            </NavLink>

            <Button
              sx={{ display: { xs: "block", md: "none" } }}
              onClick={toggleDrawer(true)}
              className="menu-md-bottom"
            >
              <svg
                width="24"
                height="24"
                viewBox="0 0 24 24"
                fill="#d8c3a5"
                xmlns="http://www.w3.org/2000/svg"
              >
                <path
                  d="M10 6H16M10 14H16M10 10H22M10 18H22M3 10H5C5.55228 10 6 9.55228 6 9V7C6 6.44772 5.55228 6 5 6H3C2.44772 6 2 6.44772 2 7V9C2 9.55228 2.44772 10 3 10ZM3 18H5C5.55228 18 6 17.5523 6 17V15C6 14.4477 5.55228 14 5 14H3C2.44772 14 2 14.4477 2 15V17C2 17.5523 2.44772 18 3 18Z"
                  stroke="#e85a4f"
                  stroke-width="1.5"
                  stroke-linecap="round"
                />
              </svg>
            </Button>
          </Grid>
          <Grid
            item
            sx={{
              display: "flex",
              justifyContent: "center",
              alignItems: "center",
              flexDirection: "column",
              width: "100%",
              padding: "0 5px",
            }}
            className="header-Middle"
          >
            <Grid
              item
              container
              sx={{
                display: "flex",
                alignItems: "center",
                justifyContent: "center",
                flexDirection: "row",
              }}
              xs={12}
              className="header-top"
            >
              <Grid
                item
                sx={{
                  display: "flex",
                  justifyContent: "center",
                  alignItems: "center",
                }}
                className="header-top-searchbar"
              >
                <Button
                  href={`http://localhost:8080/search/${searchContent}`}
                  onClick={handleClickOnSearchButton}
                  id="header-button-search"
                  variant="outlined"
                >
                  جست‌وجو
                </Button>
                <Box ref={containerRef} position="relative">
                  <TextField
                    value={searchContent}
                    onChange={handleChangeSetSearchContent}
                    placeholder="جست‌وجو در بیدوین"
                    className="search-input-with-icon custom-text"
                    onFocus={handleFocus}
                    sx={{
                      padding: { xs: "4px 10px", md: "7px 10px" },
                      borderRadius: { xs: "10px 0 0 10px", md: "0" },
                    }}
                    InputProps={{
                      startAdornment: (
                        <InputAdornment position="start">
                          <svg
                            width="24"
                            height="24"
                            viewBox="0 0 24 24"
                            fill="none"
                            xmlns="http://www.w3.org/2000/svg"
                          >
                            <path
                              fillRule="evenodd"
                              clipRule="evenodd"
                              d="M2.75 11.5C2.75 16.3325 6.66751 20.25 11.5 20.25C16.3325 20.25 20.25 16.3325 20.25 11.5C20.25 6.66751 16.3325 2.75 11.5 2.75C6.66751 2.75 2.75 6.66751 2.75 11.5ZM11.5 21.75C5.83908 21.75 1.25 17.1609 1.25 11.5C1.25 5.83908 5.83908 1.25 11.5 1.25C17.1609 1.25 21.75 5.83908 21.75 11.5C21.75 14.0605 20.8111 16.4017 19.2589 18.1982L22.5303 21.4697C22.8232 21.7626 22.8232 22.2374 22.5303 22.5303C22.2374 22.8232 21.7626 22.8232 21.4697 22.5303L18.1982 19.2589C16.4017 20.8111 14.0605 21.75 11.5 21.75Z"
                              fill="#e85a4f"
                            />
                          </svg>
                        </InputAdornment>
                      ),
                    }}
                    variant="standard"
                  />
                  {isFocused ? (
                    <SearchBox sx={{ padding: "20px", color: "black" }}>
                      {noItems ? "محصولی پیدا نشد" : searchCards}
                    </SearchBox>
                  ) : (
                    <></>
                  )}
                </Box>
                <Grid
                  item
                  sx={{ display: { xs: "none", md: "flex" }, width: "100%" }}
                >
                  <Select
                    placeholder={"همه دسته‌بندی‌ها"}
                    closeMenuOnSelect={false}
                    components={animatedComponents}
                    options={categoryoptions}
                    className="select-on-header"
                  />
                </Grid>
              </Grid>
            </Grid>
            <Divider
              sx={{ display: { xs: "none", md: "block" } }}
              color="#8e8d8a"
              style={{
                width: "100%",
                height: "2px",
              }}
            />
            <Grid
              item
              container
              sx={{
                display: { xs: "none", md: "flex" },
                flexDirection: { md: "row" },
                justifyContent: "flex-start",
                alignItems: "center",
                width: "100%",
                marginTop: "15px",
              }}
              xs={12}
              className="header-bottom"
            >
              <Grid
                item
                xs={12}
                sx={{
                  display: "flex",
                  justifyContent: "flex-start",
                  alignItems: "center",
                }}
                gap={{ xs: "10px", sm: "15px", md: "20px", lg: "30px" }}
              >
                {drawerBottomList.map((element, index) => (
                  <NavItems
                    className={element.classNameHeader}
                    direction={element.direction}
                    key={index}
                  >
                    <HeaderIcons
                      index={element.iconNumber}
                      iconClassName={element.iconClassName}
                      outSideColor={element.iconOutSideColor}
                      insideColor={element.iconInSideColor}
                      key={index}
                    />
                    <span className={element.spanClassName}>
                      {element.content}
                    </span>
                  </NavItems>
                ))}

                <div className="header-bottom-item">
                  <HeaderIcons
                    index={5}
                    iconClassName=""
                    outSideColor="#d8c3a5"
                    insideColor="#8e8d8a"
                    key={5}
                  />
                  <Box
                    id="basic-button"
                    aria-controls={open ? "basic-menu" : undefined}
                    aria-haspopup="true"
                    aria-expanded={open ? "true" : undefined}
                    onClick={handleClick}
                  >
                    <svg
                      width="24"
                      height="24"
                      viewBox="0 0 24 24"
                      fill="none"
                      xmlns="http://www.w3.org/2000/svg"
                    >
                      <path
                        d="M7 10L12 14L17 10"
                        stroke="#8e8d8a"
                        strokeWidth="1.5"
                        strokeLinecap="round"
                        strokeLinejoin="round"
                      />
                    </svg>
                    <span className="spanNavClass">دسته بندی‌ها</span>
                  </Box>
                  <Menu
                    id="basic-menu"
                    anchorEl={anchorEl}
                    open={open}
                    onClose={handleClose}
                    MenuListProps={{
                      "aria-labelledby": "basic-button",
                    }}
                  >
                    {menuCategories.map((element, index) => (
                      <MenuItem
                        key={index}
                        className="nav-item-header"
                        onClick={element.onClick}
                      >
                        <NavItems
                          className={element.linkClassName}
                          direction={element.linkTo}
                          key={index}
                        >
                          {element.label}
                        </NavItems>
                      </MenuItem>
                    ))}
                  </Menu>
                </div>
              </Grid>
            </Grid>
          </Grid>
          <Grid
            item
            sx={{
              display: { xs: "none", md: "flex" },
              justifyContent: "center",
              alignItems: "center",
              flexDirection: "column",
              paddingRight: { xs: "0px", md: "10px" },
            }}
            className="header-User"
          >
            {user ? (
              <>
                <Box
                  className="header-bottom-item"
                  aria-controls={openPopperProfile ? "basic-menu" : undefined}
                  aria-haspopup="true"
                  aria-expanded={openPopperProfile ? "true" : undefined}
                  onClick={handleClickOnProfile}
                  sx={{
                    display: "flex",
                    flexDirection: "row",
                    justifyContent: "center",
                    alignItems: "center",
                  }}
                >
                  {userInfo !== undefined ? (
                    <img
                      src={
                        userInfo.image === null ? defaultImage : userInfo.image
                      }
                      alt={userInfo.username}
                      className="avatarImage"
                    />
                  ) : (
                    <Skeleton variant="circular">
                      <Avatar />
                    </Skeleton>
                  )}

                  <Grid
                    item
                    sx={{
                      display: "flex",
                      flexDirection: "column",
                      justifyContent: "center",
                      alignItems: "flex-start",
                    }}
                  >
                    {userInfo !== undefined ? (
                      <span className="nameSpan">
                        {`${userInfo.name} \u00A0 ${userInfo.last_name}`}
                      </span>
                    ) : (
                      <span className="nameSpan">
                        {`نام \u00A0 نام خانوادگی`}
                      </span>
                    )}
                    {userInfo !== undefined ? (
                      <span className="usernameSpan">{userInfo.username}</span>
                    ) : (
                      <span className="usernameSpan">username</span>
                    )}
                  </Grid>
                  {openProfile ? (
                    <svg
                      width="24"
                      height="24"
                      viewBox="0 0 24 24"
                      fill="none"
                      xmlns="http://www.w3.org/2000/svg"
                    >
                      <path
                        d="M17 14L12 10L7 14"
                        stroke="#e85a4f"
                        stroke-width="1.5"
                        stroke-linecap="round"
                        stroke-linejoin="round"
                      />
                    </svg>
                  ) : (
                    <svg
                      width="24"
                      height="24"
                      viewBox="0 0 24 24"
                      fill="none"
                      xmlns="http://www.w3.org/2000/svg"
                    >
                      <path
                        d="M7 10L12 14L17 10"
                        stroke="#e85a4f"
                        strokeWidth="1.5"
                        strokeLinecap="round"
                        strokeLinejoin="round"
                      />
                    </svg>
                  )}
                </Box>
                <Menu
                  id="basic-menu"
                  anchorEl={openPopperProfile}
                  open={openPopperProfile}
                  onClose={handleClosePopperProfile}
                  MenuListProps={{
                    "aria-labelledby": "basic-button",
                  }}
                >
                  <NavLink to={"/profile/0"} className="linkToProfilePage">
                    <Grid
                      item
                      xs={12}
                      sx={{
                        display: "flex",
                        justifyContent: "center",
                        alignItems: "center",
                        width: "100%",
                        gap: "15px",
                      }}
                      className="linkToProfilePage-grid"
                      onClick={() => handleClickOnHeaderItem(0)}
                    >
                      <Grid
                        item
                        sx={{
                          display: "flex",
                          alignItems: "center",
                          justifyContent: "center",
                          flexDirection: "row",
                        }}
                      >
                        {userInfo !== undefined ? (
                          <img
                            src={
                              userInfo.image === null
                                ? defaultImage
                                : userInfo.image
                            }
                            alt={userInfo.username}
                            className="avatarImage"
                          />
                        ) : (
                          <Skeleton variant="circular">
                            <Avatar />
                          </Skeleton>
                        )}
                      </Grid>
                      <span>صفحه کاربری</span>
                    </Grid>
                  </NavLink>
                  {navItems.map((element, index) => (
                    <NavItems
                      direction={element.direction}
                      className="nav-link-header-personal"
                    >
                      <MenuItem
                        key={index}
                        className={`nav-link-custome-header ${
                          props.activeTab === element.tabNumber
                            ? "activeTab"
                            : ""
                        }`}
                        onClick={() =>
                          handleClickOnHeaderItem(element.tabNumber)
                        }
                        // onClick={() => props.setTab(element.tabNumber)}
                      >
                        <NavbarIcon
                          index={element.iconNumber}
                          iconClassName={element.iconClass}
                        />
                        <span>{element.text}</span>
                      </MenuItem>
                    </NavItems>
                  ))}
                  <Grid
                    item
                    xs={12}
                    sx={{
                      display: "flex",
                      justifyContent: "center",
                      alignItems: "center",
                      width: "100%",
                      gap: "15px",
                    }}
                    className="linkToProfilePage-top"
                    onClick={() => handleLogOut()}
                  >
                    <MenuItem className="nav-link-custome-header">
                      <NavbarIcon index={8} iconClassName="logOutIcon" />
                      <span>خروج از حساب</span>
                    </MenuItem>
                  </Grid>
                </Menu>
              </>
            ) : (
              <Button
                className="logAndRegisterButton"
                onClick={handleClickGoSignUp}
              >
                <svg
                  width="24"
                  height="24"
                  viewBox="0 0 24 24"
                  fill="#d8c3a5"
                  xmlns="http://www.w3.org/2000/svg"
                >
                  <circle
                    cx="12"
                    cy="12"
                    r="10"
                    stroke="#8e8d8a"
                    stroke-width="1.5"
                    stroke-linejoin="round"
                  />
                  <path
                    d="M17 17C15.5186 15.7256 13.8139 15 12 15C10.1861 15 8.48139 15.7256 7 17"
                    stroke="#8e8d8a"
                    stroke-width="1.5"
                    stroke-linecap="round"
                    stroke-linejoin="round"
                  />
                  <circle
                    cx="3"
                    cy="3"
                    r="3"
                    transform="matrix(1 0 0 -1 9 12)"
                    stroke="#8e8d8a"
                    stroke-width="1.5"
                    stroke-linejoin="round"
                  />
                </svg>
                <span>ورود/ثبت‌نام</span>
              </Button>
            )}
          </Grid>
        </Toolbar>
      </AppBar>
    </HideOnScroll>
  );
}

export function HeaderIcons({
  index,
  iconClassName,
  outSideColor = "none",
  insideColor = "#8e8d8a",
  onClickFunction,
}) {
  if (index === 1)
    return (
      <svg
        id="drawer-back-button"
        onClick={onClickFunction}
        width="24"
        height="24"
        viewBox="0 0 24 24"
        fill={outSideColor}
        xmlns="http://www.w3.org/2000/svg"
        className={iconClassName}
      >
        <path
          d="M18 8L22 12M22 12L18 16M22 12H8"
          stroke={insideColor}
          strokeWidth="1.5"
          strokeLinecap="round"
          strokeLinejoin="round"
        />
        <path
          d="M15 18.2454C13.6304 19.3433 11.8919 20 10 20C5.58173 20 2.00001 16.4183 2.00001 12C2.00001 7.58172 5.58173 4 10 4C11.8919 4 13.6304 4.65672 15 5.75462"
          stroke={insideColor}
          strokeWidth="1.5"
          strokeLinecap="round"
        />
      </svg>
    );
  else if (index === 2)
    return (
      <svg
        width="24"
        height="24"
        viewBox="0 0 24 24"
        fill={outSideColor}
        xmlns="http://www.w3.org/2000/svg"
        className={iconClassName}
      >
        <path
          d="M15.5179 7L8.48207 7C6.93849 7 5.97675 8.67443 6.75451 10.0077L10.2724 16.0385C11.0442 17.3615 12.9558 17.3615 13.7276 16.0385L17.2455 10.0077C18.0232 8.67443 17.0615 7 15.5179 7Z"
          stroke={insideColor}
          strokeWidth="1.5"
          strokeLinejoin="round"
        />
      </svg>
    );
  else if (index === 3)
    return (
      <svg
        width="24"
        height="24"
        viewBox="0 0 24 24"
        fill={outSideColor}
        xmlns="http://www.w3.org/2000/svg"
        className={iconClassName}
      >
        <path
          d="M18.301 18.9281L18.9215 18.5607C20.2077 17.799 21 16.3914 21 14.8681V9.13192C21 7.6086 20.2077 6.20099 18.9215 5.43932L14.0785 2.57125C12.7923 1.80958 11.2077 1.80958 9.92154 2.57125L5.07846 5.43932C3.7923 6.20099 3 7.6086 3 9.13192V14.8681C3 16.3914 3.7923 17.799 5.07846 18.5607L5.69896 18.9281M18.301 18.9281L14.0785 21.4288C12.7923 22.1904 11.2077 22.1904 9.92154 21.4288L5.69896 18.9281M18.301 18.9281C17.0431 16.6982 14.6924 15.1979 12 15.1979C9.30762 15.1979 6.95686 16.6982 5.69896 18.9281"
          stroke={insideColor}
          stroke-width="1.5"
          stroke-linejoin="round"
        />
        <circle
          cx="3"
          cy="3"
          r="3"
          transform="matrix(1 0 0 -1 9 12)"
          stroke={insideColor}
          stroke-width="1.5"
          stroke-linejoin="round"
        />
      </svg>
    );
  else if (index === 4)
    return (
      <svg
        id="home-icon"
        width="24"
        height="24"
        viewBox="0 0 24 24"
        fill={outSideColor}
        xmlns="http://www.w3.org/2000/svg"
        className={iconClassName}
      >
        <path
          d="M8 16C11.1715 17.3455 12.9364 17.3211 16 16M16.1804 22H7.81965C5.5109 22 3.6393 20.214 3.6393 18.0108V13.133C3.6393 12.4248 3.34447 11.7456 2.81969 11.2448C1.60381 10.0845 1.76187 8.16205 3.15251 7.19692L9.54124 2.763C11.0071 1.74567 12.9929 1.74567 14.4588 2.763L20.8475 7.19691C22.2381 8.16205 22.3962 10.0845 21.1803 11.2448C20.6555 11.7456 20.3607 12.4248 20.3607 13.133V18.0108C20.3607 20.214 18.4891 22 16.1804 22Z"
          stroke={insideColor}
          strokeWidth="1.5"
          strokeLinecap="round"
        />
      </svg>
    );
  else if (index === 5)
    return (
      <svg
        width="24"
        height="24"
        viewBox="0 0 24 24"
        fill={outSideColor}
        xmlns="http://www.w3.org/2000/svg"
        className={iconClassName}
      >
        <path
          d="M2 4C2 2.89543 2.89543 2 4 2H8C9.10457 2 10 2.89543 10 4V8C10 9.10457 9.10457 10 8 10H4C2.89543 10 2 9.10457 2 8V4Z"
          stroke={insideColor}
          stroke-width="1.5"
        />
        <path
          d="M22 6C22 8.20914 20.2091 10 18 10C15.7909 10 14 8.20914 14 6C14 3.79086 15.7909 2 18 2C20.2091 2 22 3.79086 22 6Z"
          stroke={insideColor}
          stroke-width="1.5"
        />
        <path
          d="M10 18C10 20.2091 8.20914 22 6 22C3.79086 22 2 20.2091 2 18C2 15.7909 3.79086 14 6 14C8.20914 14 10 15.7909 10 18Z"
          stroke={insideColor}
          stroke-width="1.5"
        />
        <path
          d="M14 16C14 14.8954 14.8954 14 16 14H20C21.1046 14 22 14.8954 22 16V20C22 21.1046 21.1046 22 20 22H16C14.8954 22 14 21.1046 14 20V16Z"
          stroke={insideColor}
          stroke-width="1.5"
        />
      </svg>
    );
  else if (index === 6)
    return (
      <svg
        width="24"
        height="24"
        viewBox="0 0 24 24"
        fill={outSideColor}
        xmlns="http://www.w3.org/2000/svg"
        className={iconClassName}
      >
        <path
          d="M14.1263 3H16.9516C17.5589 3 18.1373 3.263 18.5408 3.72267L21.4629 7.05149C22.141 7.82402 22.1814 8.9755 21.559 9.79476L13.6854 20.1597C12.8342 21.2801 11.1658 21.2801 10.3146 20.1597L2.44095 9.79476C1.81861 8.9755 1.85896 7.82402 2.53709 7.05149L5.45918 3.72267C5.86269 3.263 6.44106 3 7.04842 3H10.1099M14.1263 3L16.2526 8.38285M14.1263 3H10.1099M16.2526 8.38285H21.5684M16.2526 8.38285L12 20.7634L7.74736 8.38285M16.2526 8.38285H7.74736M10.1099 3L7.74736 8.38285M2.43156 8.38285H7.74736"
          stroke={insideColor}
          stroke-width="1.5"
          stroke-linecap="round"
          stroke-linejoin="round"
        />
      </svg>
    );
  else if (index === 7)
    return (
      <svg
        width="24"
        height="24"
        viewBox="0 0 24 24"
        fill={outSideColor}
        xmlns="http://www.w3.org/2000/svg"
        className={iconClassName}
      >
        <path
          d="M12 13V19"
          stroke={insideColor}
          stroke-width="1.5"
          stroke-linecap="round"
          stroke-linejoin="round"
        />
        <path
          d="M15 16L9 16"
          stroke={insideColor}
          stroke-width="1.5"
          stroke-linecap="round"
          stroke-linejoin="round"
        />
        <path
          d="M8.06903 22H15.9314C17.7727 22 19.3762 20.7429 19.8157 18.9548L21.7822 10.9548C22.4018 8.43408 20.4936 6 17.8979 6H6.1025C3.50672 6 1.5985 8.4341 2.21814 10.9548L4.18467 18.9548C4.62422 20.743 6.22768 22 8.06903 22Z"
          stroke={insideColor}
          stroke-width="1.5"
          stroke-linecap="round"
          stroke-linejoin="round"
        />
        <path
          d="M3 10H21"
          stroke={insideColor}
          stroke-width="1.5"
          stroke-linecap="round"
        />
        <path
          d="M9 2L6 6"
          stroke={insideColor}
          stroke-width="1.5"
          stroke-linecap="round"
          stroke-linejoin="round"
        />
        <path
          d="M15 2L18 6"
          stroke={insideColor}
          stroke-width="1.5"
          stroke-linecap="round"
          stroke-linejoin="round"
        />
      </svg>
    );
  else if (index === 8)
    return (
      <svg
        width="24"
        height="24"
        viewBox="0 0 24 24"
        fill="none"
        xmlns="http://www.w3.org/2000/svg"
        className={iconClassName}
      >
        <path
          d="M16 3H21M21 3V8M21 3L10 14"
          stroke={insideColor}
          stroke-width="1.5"
          stroke-linecap="round"
          stroke-linejoin="round"
        />
        <path
          d="M19 13C19 17.4183 15.4183 21 11 21C6.58172 21 3 17.4183 3 13C3 8.58172 6.58172 5 11 5"
          stroke={insideColor}
          stroke-width="1.5"
          stroke-linecap="round"
        />
      </svg>
    );
}
const drawerBottomList = [
  {
    content: "خانه",
    direction: "/",
    className: "navLinkClass",
    classNameHeader: "header-bottom-item",
    spanClassName: "spanNavClass",
    iconNumber: 4,
    iconClassName: "",
    iconInSideColor: "#8e8d8a",
    iconOutSideColor: "#d8c3a5",
  },
  {
    content: "مزایده‌های داغ",
    direction: "/hot_auctions",
    className: "navLinkClass",
    classNameHeader: "header-bottom-item",
    spanClassName: "spanNavClass",
    iconNumber: 6,
    iconClassName: "",
    iconInSideColor: "#8e8d8a",
    iconOutSideColor: "#d8c3a5",
  },
  {
    content: "فروش کالا",
    direction: "",
    className: "navLinkClass",
    classNameHeader: "header-bottom-item",
    spanClassName: "spanNavClass",
    iconNumber: 7,
    iconClassName: "",
    iconInSideColor: "#8e8d8a",
    iconOutSideColor: "#d8c3a5",
  },
];
const categoryoptions = [
  {
    className: "category-li",
    linkTo: "",
    clickFunc: "",
    content: "All Categories",
    label: "همه دسته‌ها",
    color: "#00B8D9",
  },
  {
    className: "category-li",
    linkTo: "",
    clickFunc: "",
    content: "labtop",
    label: "لبتاپ",
    color: "#0052CC",
  },
  {
    className: "category-li",
    linkTo: "",
    clickFunc: "",
    content: "console",
    label: "کنسول بازی",

    color: "#5243AA",
  },
  {
    className: "category-li",
    linkTo: "",
    clickFunc: "",
    content: "mobile",
    label: "تلفن همراه",
    color: "#FF5630",
  },
];
const navItems = [
  {
    tabNumber: 0,
    className: "nav-link-custome nav-color",
    direction: "/profile/0",
    iconClass: "navbarIconClass",
    text: "اطلاعات شخصی",
    iconNumber: 1,
    insideIconColor: "",
  },
  {
    tabNumber: 1,
    className: "nav-link-custome nav-color",
    direction: "/profile/1",
    iconClass: "navbarIconClass",
    text: "سابقه خرید",
    iconNumber: 2,
    insideIconColor: "",
  },
  {
    tabNumber: 2,
    className: "nav-link-custome nav-color",
    direction: "/profile/2",
    iconClass: "navbarIconClass",
    text: "سابقه فروش",
    iconNumber: 3,
    insideIconColor: "",
  },
  {
    tabNumber: 3,
    className: "nav-link-custome nav-color",
    direction: "/profile/3",
    iconClass: "navbarIconClass",
    text: "مزایده‌های من",
    iconNumber: 4,
    insideIconColor: "",
  },
  {
    tabNumber: 4,
    className: "nav-link-custome nav-color",
    direction: "/profile/4",
    iconClass: "navbarIconClass",
    text: "کیف پول",
    iconNumber: 5,
    insideIconColor: "",
  },
  {
    tabNumber: 5,
    className: "nav-link-custome nav-color",
    direction: "/profile/5",
    iconClass: "navbarIconClass",
    text: "علاقه‌مندی‌ها",
    iconNumber: 6,
    insideIconColor: "",
  },
];
const menuCategories = [
  {
    className: "menu-item ",
    linkClassName: "link-menu-item",
    linkTo: "/categories/laptop/",
    content: "laptop",
    label: "لپتاپ",
  },
  {
    className: "menu-item",
    linkClassName: "link-menu-item",
    linkTo: "/categories/console/",
    content: "console",
    label: "کنسول بازی",
  },
  {
    className: "menu-item",
    linkClassName: "link-menu-item",
    linkTo: "/categories/phone/",
    content: "smartphone",
    label: "تلفن همراه",
  },
];
